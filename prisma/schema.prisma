// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Size {
  XS
  S
  M
  L
  XL
  XXL
  XXXL
}

enum Gender {
  men
  women
  kid
  unisex
}

enum Role {
  admin
  user 
}


model Category {
  id      String    @id @default(uuid())
  name    String    @unique
  Product Product[] // Referencia de la relación de Producto
}

model Product {
  id          String   @id @default(uuid())
  title       String
  description String 
  inStock     Int 
  price       Float    @default(0)
  sizes       Size[]   @default([])
  slug        String   @unique
  tags        String[] @default([])
  gender      Gender

  // relación con categoría
  category    Category  @relation(fields: [categoryId], references: [id])
  categoryId  String 
  ProductImage ProductImage[] // columna de la relación de ProductImage

  @@index([gender])
  OrderItem OrderItem[]
}

model ProductImage {
  id Int @id @default(autoincrement())
  url String 

  // relación con Producto
  product Product @relation( fields: [productId], references: [id])
  productId String
}


model User {
  id              String    @id @default( uuid() )
  name            String 
  email           String    @unique
  emailVerified   DateTime?
  password        String
  role            Role      @default(user)
  image           String?

// Referencia
  address         UserAddress?

  // Relaciones
  Order Order[]
}

model Country {
  id    String  @id
  name  String

  UserAddress UserAddress[]

  OrderAddress OrderAddress[]
}

model UserAddress {
  id          String @id @default(uuid())
  firstName   String 
  lastName    String
  address     String 
  address2    String?
  postalCode  String 
  phone       String
  city        String

  // Relaciones
  // uno a muchos
  country Country @relation(fields: [countryId], references: [id])
  countryId String

  user User @relation(fields: [userId], references: [id])
  userId String @unique
}

// Orden de compras
model Order {
    id            String @id @default(uuid())
    subTotal      Float
    tax           Float 
    total         Float
    itemsInOrder  Int
    isPaid        Boolean
    paidAt        DateTime? 

    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt 

    // Relaciones 
    user User @relation( fields: [userId], references: [id])
    userId String 

    OrderItem OrderItem[]
    OrderAddress OrderAddress?
}


model OrderItem {
  id        String @id @default(uuid())
  quantity  Int 
  price     Float 
  size      Size 

  // Relaciones
  order Order @relation(fields: [orderId], references: [id])
  orderId String 

  product Product @relation( fields: [productId], references: [id]) 
  productId String 
}


model OrderAddress {
  id          String @id @default(uuid())
  firstName   String
  lastName    String
  address     String
  address2    String? 
  postalCode  String 
  city        String 
  phone       String 

  // Relaciones
  country     Country @relation(fields: [countryId], references: [id])
  countryId String 

  order Order @relation(fields: [orderId], references: [id])
  orderId String @unique
}